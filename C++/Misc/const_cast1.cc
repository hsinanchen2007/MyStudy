/*
    const_cast 关键字
    const_cast 比较好理解，它用来去掉表达式的 const 修饰或 volatile 修饰。换句话说，
    const_cast 就是用来将 const/volatile 类型转换为非 const/volatile 类型。

    下面我们以 const 为例来说明 const_cast 的用法：

    运行结果：
    n = 100
    *p = 234

    &n用来获取 n 的地址，它的类型为const int *，必须使用 const_cast 转换为int *类型后
    才能赋值给 p。由于 p 指向了 n，并且 n 占用的是栈内存，有写入权限，所以可以通过 p 修改 
    n 的值。

    有读者可能会问，为什么通过 n 和 *p 输出的值不一样呢？这是因为 C++ 对常量的处理更像是编译
    时期的#define，是一个值替换的过程，代码中所有使用 n 的地方在编译期间就被替换成了 100。
    换句话说，第 8 行代码被修改成了下面的形式：
    
    cout<<"n = "<<100<<endl;

    这样以来，即使程序在运行期间修改 n 的值，也不会影响 cout 语句了。更多关于 const 的内容请猛击
    《C++中的const又玩出了新花样》。

    使用 const_cast 进行强制类型转换可以突破 C/C++ 的常数限制，修改常数的值，因此有一定的危险性；
    但是程序员如果这样做的话，基本上会意识到这个问题，因此也还有一定的安全性。

    C++中的const又玩出了新花样
    < 上一节下一节 >

    在C语言中，const  用来限制一个变量，表示这个变量不能被修改，我们通常称这样的变量为常量（Constant），
    《C语言const的用法详解》一节已经进行了细致的讲解。

    在C++中，const 的含义并没有改变，只是对细节进行了一些调整，以下是最主要的两点。
    C++中的 const 更像编译阶段的 #define
    先来看下面的两条语句：
    const int m = 10;
    int n = m;
    我们知道，变量是要占用内存的，即使被 const 修饰也不例外。m、n 两个变量占用不同的内存，int n = m;
    表示将 m 的值赋给 n，这个赋值的过程在C和C++中是有区别的。

    在C语言中，编译器会先到 m 所在的内存取出一份数据，再将这份数据赋给 n；而在C++中，编译器会直接将 10 
    赋给 n，没有读取内存的过程，和int n = 10;的效果一样。C++ 中的常量更类似于#define命令，是一个值替换
    的过程，只不过#define是在预处理阶段替换，而常量是在编译阶段替换。

    C++ 对 const 的处理少了读取内存的过程，优点是提高了程序执行效率，缺点是不能反映内存的变化，一旦 const 
    变量被修改，C++ 就不能取得最新的值。

    有读者提出疑问，const 变量不是禁止被修改吗？对，这种说法没错！不过这只是语法层面上的限制，通过指针仍然
    可以修改。下面的代码演示了如何通过指针修改 const 变量：

        #include <stdio.h>
        int main(){
            const int n = 10;
            int *p = (int*)&n;  //必须强制类型转换
            *p = 99;  //修改const变量的值
            printf("%d\n", n);
            return 0;
        }

    注意，&n得到的指针的类型是const int *，必须强制转换为int *后才能赋给 p，否则类型是不兼容的。
    将代码放到.c文件中，以C语言的方式编译，运行结果为99。再将代码放到.cpp文件中，以C++的方式编译，运行结果就
    变成了10。这种差异正是由于C和C++对 const 的处理方式不同造成的。

    在C语言中，使用 printf 输出 n 时会到内存中获取 n 的值，这个时候 n 所在内存中的数据已经被修改成了 99，
    所以输出结果也是 99。而在C++中，printf("%d\n", n);语句在编译时就将 n 的值替换成了 10，效果和
    printf("%d\n", 10);一样，不管 n 所在的内存如何变化，都不会影响输出结果。

    当然，这种修改常量的变态代码在实际开发中基本不会出现，本例只是为了说明C和C++对 const 的处理方式的差异：
    C语言对 const 的处理和普通变量一样，会到内存中读取数据；C++ 对 const 的处理更像是编译时期的#define，
    是一个值替换的过程。
    
    C++中全局 const 变量的可见范围是当前文件
    我们知道，普通全局变量的作用域是当前文件，但是在其他文件中也是可见的，使用extern声明后就可以使用，这在
    《C语言头文件的编写》一章中进行了深入讲解。下面是多文件编程的演示代码：

        代码段1（源文件1）：
        #include <stdio.h>
        int n = 10;
        void func();
        int main(){
            func();
            printf("main: %d\n", n);
            return 0;
        }

        代码段2（源文件2）：
        #include <stdio.h>
        extern int n;
        void func(){
            printf("module: %d\n", n);
        }

    不管是以C还是C++的方式编译，运行结果都是：
    module: 10
    main: 10

    在C语言中，const 变量和普通变量一样，在其他源文件中也是可见的。修改代码段1，在 n 的定义前面加 const 限制，
    如下所示：
    const int n = 10;

    修改后的代码仍然能够正确编译，运行结果和上面也是一样的。这说明C语言中的 const 变量在多文件编程时的表现和普通
    变量一样，除了不能修改，没有其他区别。

    但是如果按照C++的方式编译（将源文件后缀设置为.cpp），修改后的代码就是错误的。这是因为 C++ 对 const 的特性
    做了调整，C++ 规定，全局 const 变量的作用域仍然是当前文件，但是它在其他文件中是不可见的，这和添加了static
    关键字的效果类似。虽然代码段2中使用 extern 声明了变量 n，但是在链接时却找不到代码段1中的 n。

    由于 C++ 中全局 const 变量的可见范围仅限于当前源文件，所以可以将它放在头文件中，这样即使头文件被包含多次也
    不会出错，请看下面的例子。

    module.h 代码：
        const int n = 10;
        void func();
        module.cpp 代码：
        #include <stdio.h>
        #include "module.h"
        void func(){
            printf("module: %d\n", n);
        }

    main.cpp 代码：
        #include <stdio.h>
        #include "module.h"
        int main(){
            func();
            printf("main: %d\n", n);
            return 0;
        }

    运行结果：
    module: 10
    main: 10

    C和C++中全局 const 变量的作用域相同，都是当前文件，不同的是它们的可见范围：C语言中 const 全局变量的可见范围
    是整个程序，在其他文件中使用 extern 声明后就可以使用；而C++中 const 全局变量的可见范围仅限于当前文件，在其他
    文件中不可见，所以它可以定义在头文件中，多次引入后也不会出错。

    如果你使用的是 GCC，那么可以通过添加 extern 关键字来增大 C++ 全局 const 变量的可见范围，如下所示：
    extern const int n = 10;

    这样 n 的可见范围就变成了整个程序，在其他文件中使用 extern 声明后就可以使用了。不过这种方式只适用于 GCC，不适用于 
    VS/VC。
    
    总结
    C++ 中的 const 变量虽然也会占用内存，也能使用&获取得它的地址，但是在使用时却更像编译时期的#define；#define
    也是值替换，可见范围也仅限于当前文件。

    很多C++教程在对比 const 和 #define 的优缺点时提到，#define 定义的常量仅仅是字符串的替换，不会进行类型检查，
    而 const 定义的常量是有类型的，编译器会进行类型检查，相对来说比 #define 更安全，所以鼓励大家使用 const 代替 
    #define。

    这种说法虽然没错，但是我没有发现不进行类型检查有什么隐患，我在使用 #define 的过程中也没有发现什么缺点，所以我对
    上面的观点持保留态度，也请大家多多指点。

    关注公众号「站长严长生」，在手机上阅读所有教程，随时随地都能学习。本公众号由站长亲自运营，长期更新，坚持原创，
    专注于分享创业故事+学习历程+工作记录+生活日常+编程资料。
*/

#include <iostream>

using namespace std;

int main(){
    const int n = 100;
    int *p = const_cast<int*>(&n);
    *p = 234;

    cout<<"n = "<< n<< " " << &n << endl;
    cout<<"*p = "<< *p << " " << &p << endl;

    return 0;
}

// n = 100 0x7ffd620d79ec
// *p = 234 0x7ffd620d79e0
